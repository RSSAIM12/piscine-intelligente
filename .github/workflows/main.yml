name: Flutter CI/CD to Firebase

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  FLUTTER_VERSION: '3.22.0'
  FIREBASE_PROJECT: 'piscineintelligente'

jobs:
  test:
    name: Flutter Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Get dependencies
      run: flutter pub get

    - name: Analyze code
      run: flutter analyze

    - name: Run tests
      run: flutter test

    - name: Build Web
      run: flutter build web --release --no-wasm-dry-run

    - name: Verify build
      run: |
        echo "üìÅ Checking build directory..."
        ls -la build/web/
        echo "‚úÖ Build completed successfully"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: build/web/

  deploy:
    name: üöÄ Deploy to Firebase
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: build/web

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Verify Firebase project
      run: |
        echo "üîß Configuring Firebase project: ${{ env.FIREBASE_PROJECT }}"
        firebase use ${{ env.FIREBASE_PROJECT }} --token "${{ secrets.FIREBASE_TOKEN }}"

    - name: List files before deploy
      run: ls -la build/web/

    - name: üöÄ Deploy to Firebase Hosting
      run: |
        firebase deploy \
          --only hosting \
          --project ${{ env.FIREBASE_PROJECT }} \
          --token "${{ secrets.FIREBASE_TOKEN }}" \
          --non-interactive
        
        echo "‚úÖ Deployment completed successfully!"